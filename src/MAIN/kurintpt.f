
      SUBROUTINE KURINTPT(FEH,TEFF,LOGG,COLR)
C
C INTERPOLATES IN the KURUCZ COLOR TABLE
C    INPUT: FEH, TEFF, LOG G  (UNCHANGED BY COLOR)
C    OUTPUT: COLR(5), WHERE COLR(1) = BC
C                           COLR(2) = U-B
C                           COLR(3) = B-V
C                           COLR(4) = V-R
C                           COLR(5) = R-I
C                           COLR(6) = V-J NOT USED
C                           COLR(7) = V-K NOT USED 
C                           COLR(8) = V-L NOT USED
C
      IMPLICIT REAL*8(A-H,O-Z)
C      REAL*8 FEH,TEFF,LOGG,COLR(8)   ! use this line for all colours
      REAL*8 FEH,TEFF,LOGG,COLR(5)
      INTEGER ONE
      DIMENSION COL(8),TABL(15,65,10,8),GLOG(15,65,10),JMAX(65,10),
     1  IMAX(10),CZ(10),TEF(65,10),COLT(65),COLZ(10)
      DATA  REFZ,SOLBOL/0.0200,4.660D0/
      DATA NCOLOR/0/
      DATA ONE/30/
      SAVE
C
C SET UP AND READ IN COLOR TABLE ON FIRST CALL
C
      IF(NCOLOR.EQ.0) THEN
C
        OPEN(UNIT=ONE,FILE='kurcoljkl.tbl',STATUS='OLD') 
C
C N.B. REFZ IS THE REFERENCE (SOLAR) METALLICITY
	SOLARZ=DLOG10(REFZ)
C	NCOLOR=8           !use this line for all colours
	NCOLOR=5
C
C READ IN COLOR TABLE
	K=0
	TLAST=0.
	FLAST=10.
	READ(ONE,*)
1       READ(ONE,*,END=20) FE,TE,G,(COL(M),M=1,NCOLOR)
c        write(*,*)fe,te,g
	IF(TE.EQ.TLAST) GOTO 15
	IF(FE.EQ.FLAST) GOTO 10
	K=K+1
	KMAX=K
	CZ(K)=FE+SOLARZ
	FLAST=FE
	I=0
10      I=I+1
	IMAX(K)=I
	TEF(I,K)=DLOG10(TE)
	TLAST=TE
	J=0
15      J=J+1
	JMAX(I,K)=J
	GLOG(J,I,K)=G
	DO M=1,NCOLOR
	  TABL(J,I,K,M)=COL(M)
	ENDDO
	GOTO 1
C
      ENDIF
C
C INTERPOLATE IN LOG G, LOG TEFF, AND [FE/H]
C
20    ZZ=FEH+SOLARZ
C ****BC 5/92
C if temp < 3500 K, just put -9.999 for the colours and exit
      IF(TEFF.LT.3500.0) THEN
         DO 666 III=1,NCOLOR
            COLR(III)=-9.999
 666     CONTINUE
         RETURN
      ENDIF
C ***BC 5/92 end of modification
      IF((CZ(KMAX)-ZZ)*(ZZ-CZ(1)).LT.0.) GO TO 980
      KK=1
30    KK=KK+1
      IF(CZ(KK).GT.ZZ) GOTO 30
      TE=DLOG10(TEFF)
      G=LOGG
      DO M=1,NCOLOR
	K0=MAX0(1,KK-2)
	KEND=MIN0(KMAX,KK+1)
	NK=KEND-K0+1
	DO K=K0,KEND
c          write(*,*)  10**tef(imax(k),k), 10**tef(1,k)
c          write(*,*) 10**te
          IF((TEF(IMAX(K),K)-TE)*(TE-TEF(1,K)).LT.0.) GO TO 985
	  II=1
40        II=II+1
	  IF(TE.GT.TEF(II,K).AND.II.LT.IMAX(K)) GO TO 40
	  I0=MAX0(1,II-2)
	  IEND=MIN0(IMAX(K),II+1)
	  NI=IEND-I0+1
	  DO I=I0,IEND
c            write(*,*) jmax(i,k), glog(jmax(i,k),i,k), glog(1,i,k)
c            write(*,*) g
C ***BC 5/92 
C Kurucz does not have high G low Teff tables, 
c so just put -9.999 for colour and continue
c            write(*,*)GLOG(1,I,K),G,GLOG(JMAX(I,K),I,K),
c      1          (GLOG(JMAX(I,K),I,K)-G)*(G-GLOG(1,I,K))
 	    IF((GLOG(JMAX(I,K),I,K)-G)*(G-GLOG(1,I,K)).LT.0.) GO TO 990
	    IF((GLOG(JMAX(I,K),I,K)-G)*(G-GLOG(1,I,K)).LT.0.) THEN
               DO 555 III=1,NCOLOR
                  COLR(III)=-9.999
 555           CONTINUE
               RETURN
            ENDIF
C ***BC end of modification
	    JJ=1
45          JJ=JJ+1
	    IF(G.GT.GLOG(JJ,I,K)) GO TO 45
	    J0=MAX0(1,JJ-2)
	    JEND=MIN0(JMAX(I,K),JJ+1)
	    NJ=JEND-J0+1
	    CALL PARROT(GLOG(J0,I,K),TABL(J0,I,K,M),JJ-J0+1,NJ,G,
     1                                                 COLT(I),1)
	  ENDDO
	  CALL PARROT(TEF(I0,K),COLT(I0),II-I0+1,NI,TE,COLZ(K),1)
	ENDDO
	CALL PARROT(CZ(K0),COLZ(K0),KK-K0+1,NK,ZZ,COL(M),1)
	COLR(M)=COL(M)
      ENDDO
C
      RETURN
C
980   PRINT *,'[Fe/H] =',FEH,
     1  ' OUTSIDE LIMITS OF COLOR CALIBRATION FILE'
      STOP'kurintpt: Fe/H problem'
985   PRINT *,TEFF,', [Fe/H] =',FEH, 
     1  ' OUTSIDE LIMITS OF COLOR CALIBRATION FILE'
      STOP'kurintpt: teff problem'
990   PRINT *,LOGG,', ',TEFF,', [Fe/H] =',FEH,
     1  ' OUTSIDE LIMITS OF COLOR CALIBRATION FILE'
      STOP'kurintpt: log g problem'
      END
C$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
      SUBROUTINE PARROT (X,Y,J,N,X0,Y0,K)
C
C PARROT INTERPOLATES BETWEEN A SET OF POINTS IN ARRAYS X AND Y
C (MONOTONIC IN X) TO PRODUCE A VERY SMOOTH CURVE.
C THE FIRST AND SECOND DERIVATIVES ARE EVERYWHERE CONTINUOUS, AND
C POLYNOMIAL "WIGGLES" BETWEEN POINTS ARE ALMOST ENTIRELY ELIMINATED.
C PARROT FINDS ONE ROTATED PARABOLA PASSING THROUGH THE POINTS J-2, J-1,
C J, WITH VERTEX EXACTLY AT J-1, AND A SECOND PARABOLA PASSING THROUGH J
C J, AND J+1, WITH VERTEX AT J, THEN DETERMINES THE Y VALUES CORRESPONDI
C TO X0 FOR EACH CURVE.  Y0 IS THE WEIGHTED SUM OF THE TWO Y VALUES, WIT
C THE WEIGHTS DETERMINED BY THE DISTANCE OF THE INTERPOLATED POINT FROM
C POINTS J AND J-1, RESPECTIVELY.
C (IN THE FIRST AND LAST INTERVALS, THE RESULT IS A WEIGHTED AVERAGE OF
C A PARABOLA AND A STRAIGHT LINE.)
C
C  INPUT PARAMETERS (UNCHANGED BY PARROT) :
C
C     X(I),Y(I) - ARRAYS OF KNOWN POINTS TO BE INTERPOLATED; X MONOTONIC
C             N - LARGEST DEFINED INDEX OF X(I) AND Y(I)
C            X0 - POINT FOR WHICH INTERPOLATED VALUE IS TO BE RETURNED
C             J - X(J) AND X(J-1) MUST BRACKET X0
C             K - SET K.EQ.1 IF CALLING PARROT FOR THE FIRST TIME IN THI
C                 INTERVAL; SET K.NE.1 IF X,Y, AND J ARE THE SAME AS THE
C                 PREVIOUS CALL TO PARROT (FOR THIS VALUE OF IS).
C                 AS PARROT IS RELATIVELY SLOW, MOST EFFICIENT USE REQUI
C                 ORDERING X0 AND SETTING K.NE.1 WHENEVER POSSIBLE.
C           [IS - SETTING IS=1, 2, OR 3 IN THE CALLING PROGRAM (WITH
C                 COMMON/PAROT/IS) ALLOWS THREE DIFFERENT SETS OF PARAME
C                 TO BE REMEMBERED SIMULTANEOUSLY]
C
C  OUTPUT PARAMETER :
C            Y0 - RETURNED VALUE CORRESPONDING TO X0
C
C
      IMPLICIT REAL*8(A-H,O-Z)
      COMMON/PAROT/IS
      COMMON/SAVE/CW(2,3),SW(2,3),A(2,3),B(2,3),FX(2,3),FY(2,3),
     1     ILINE(2)
      DIMENSION X(2),Y(2),RES(2),RT(3)
C
      DO 300 I=1,2
	 J0=I+J-2
	 XO=X0-X(J0)
	 IF(K.EQ.1) GO TO 100
C SKIP PARABOLA CALCULATIONS IF X AND Y POINTS ARE THE SAME AS LAST TIME
	 XO=XO/FX(I,IS)
	 Y1=(Y(J+1-I)-Y(J0))/FY(I,IS)
	 GO TO 200
C
C TRANSLATE COORDINATES TO VERTEX OF EACH FUTURE PARABOLA, WITH X1
C ALWAYS CHOSEN TO BE CLOSEST TO X0 (+ LINEAR EXTRAPOLATION PAST ENDS)
100      J1=J-I+1
	 X1=X(J1)-X(J0)
	 Y1=Y(J1)-Y(J0)
	 IF(J0.GT.1) GO TO 110
	 X3=X(1)-X(2)
	 Y3=Y(1)-Y(2)
	 GO TO 125
110      IF(J0.LT.N) GO TO 120
	 X3=X(N)-X(N-1)
	 Y3=Y(N)-Y(N-1)
	 IF(X3.EQ.0.0.AND.Y3.EQ.0.0) PRINT *,'+++',N,X(N),X(N-1)
	 IF(X3.EQ.0.0.AND.Y3.EQ.0.0) PRINT *,'+++',N,Y(N),Y(N-1)
	 GO TO 125
120      J3=J+3*I-5
	 X3=X(J3)-X(J0)
	 Y3=Y(J3)-Y(J0)
C SCALE X COORDINATES TO APPROXIMATELY SAME SIZE AS Y COORDINATES
125      FX(I,IS)=DMAX1(DABS(X3),DABS(X1))
	 FY(I,IS)=DMAX1(DABS(Y3),DABS(Y1))
	 IF(FY(I,IS).EQ.0.) FY(I,IS)=1.
	 X1=X1/FX(I,IS)
	 X3=X3/FX(I,IS)
	 XO=XO/FX(I,IS)
	 Y1=Y1/FY(I,IS)
	 Y3=Y3/FY(I,IS)
C DETERMINE ANGLE OF ROTATION W SUCH THAT A PARABOLA OF THE FORM Y=A*X**
C PASSES THRU THE THREE POINTS (IF THETA IS THE ANGLE FROM THE ORIGIN
C AND (X1,Y1) TO THE NEW (ROTATED) Y AXIS, NEED TO SOLVE A CUBIC EQUATIO
C IN TAN(THETA).)
	 D1=X1*X1+Y1*Y1
	 D3=X3*X3+Y3*Y3
	 R=DSQRT(D3/D1)
	 D=DSQRT(D1*D3)
	 CA=(X1*X3+Y1*Y3)/D
	 SA=(X1*Y3-X3*Y1)/D
	 IF(DABS(SA).LT..001) GO TO 150
	 RCA=R*CA
	 P=CA*(1.-RCA)/SA
	 P2=P*P
	 Q=2.*RCA-P2/3.
	 R=2.*(P2*P/27.-P*RCA/3.)-R*SA
	 Q3=Q*Q*Q/27.
	 ROOT=.25*R*R+Q3
	 IF(ROOT) 130,129,128
128      ROOT=DSQRT(ROOT)
	 THETA=DATAN(QR(-0.5*R+ROOT)+QR(-0.5*R-ROOT)-P/3.)
	 GO TO 180
C EVALUATE 2 SOLUTIONS; FIND ANGLE BETWEEN 0 AND A
129      C=QR(-R/2.)
	 TA=SA/CA
	 LL=1
	 RT(1)=2.*C-P/3.
	 RT(2)=-C-P/3.
	 IF(RT(2)*(TA-RT(2)).GT.RT(1)*(TA-RT(1))) LL=2
	 GO TO 132
C EVALUATE 3 SOLUTIONS; FIND ANGLE BETWEEN 0 AND A
130      PHI=DACOS(-R/2./DSQRT(-Q3))/3.
	 C=2.*DSQRT(-Q/3.)
	 TA=SA/CA
	 LAST=-1.
	 DO 131 L=1,3
	    RT(L)=C*DCOS(PHI+(L-1)*2.0943951) - P/3.
	    TST=RT(L)*(TA-RT(L))
	    IF(TST.LT.LAST) GO TO 131
	    LL=L
	    LAST=TST
131      CONTINUE
132      THETA=DATAN(RT(LL))
	 GO TO 180
150      THETA=SA
	 IF(CA.LT.0.) THETA=3.1415927-SA
	 THETA=THETA/2.
180      W=THETA-DATAN2(X1,Y1)
C SAVE COS AND SIN OF W, PLUS A AND B
	 CW(I,IS)=DCOS(W)
	 SW(I,IS)=DSIN(W)
	 XP=X1*CW(I,IS)+Y1*SW(I,IS)
	 YP=Y1*CW(I,IS)-X1*SW(I,IS)
	 CW2=CW(I,IS)*CW(I,IS)
	 XP2=XP*XP
	 C=4.*SW(I,IS)*YP
C NOTE C AND XP2 CAN NEVER BE SIMULTANEOUSLY ZERO, NOR XP2 AND YP,
C NOR YP AND CW2, NOR C AND CW2 (UNLESS X1=0, WHICH IS NOT LEGAL
C IN PARROT)
	 IF(DABS(C).GT.1.D8*XP2*CW2) GO TO 190
	 A(I,IS)=YP/XP2
	 B(I,IS)=C/XP2
	 ILINE(I)=0
	 GO TO 200
190      A(I,IS)=XP2/YP
	 B(I,IS)=XP2/C
	 ILINE(I)=1
C
C CALCULATE RESULTING Y FOR THIS PARABOLA
200      IF(X0.NE.X(J-1)) GO TO 201
	   IF(I*K.EQ.1) GO TO 300
	   Y0=Y(J-1)
	   RETURN
201      IF(X0.NE.X(J)) GO TO 202
	   IF(I*K.EQ.1) GO TO 300
	   Y0=Y(J)
	   RETURN
C
202      CW2=CW(I,IS)*CW(I,IS)
	 IF(ILINE(I).EQ.1) GO TO 250
	 C=B(I,IS)*XO
	 AA=A(I,IS)
	 IF(DABS(C).GT.1.D10*CW2) GO TO 240
210      IF(DABS(C).LT..0001*CW2) GO TO 230
	 IF(DABS(SW(I,IS)).LT..0001) GO TO 220
C FIND INTERSECTION OF PARABOLA AND X0 LINE IN ROTATED COORDINATES;
C CALCULATE RESULT BACK IN UNROTATED COORDINATES.
	 C=CW2-C
C        IF(C.LT.0.) GO TO 400
	 ROOT=DSQRT(C)
	 C=XO*CW(I,IS)/SW(I,IS)
	 D=2.*AA*SW(I,IS)*SW(I,IS)
	 RES(I)=(CW(I,IS)-ROOT)/D - C
	 ALT=(CW(I,IS)+ROOT)/D - C
C CHOOSE ROOT IN INTERVAL [Y(J-1),Y(J)] (OR NEAREST TO THAT INTERVAL)
	 IF((Y1-ALT)*ALT.GT.(Y1-RES(I))*RES(I)) RES(I)=ALT
	 GO TO 280
C
C SPECIAL CASES 220,230,240,250,260 BELOW:
C ROTATION ANGLE CLOSE TO ZERO, BUT A NOT SMALL
220      RES(I)=XO*(AA*XO/(1.-C/2.)+SW(I,IS))/CW(I,IS)
	 GO TO 280
C PARABOLA DEGENERATES TOWARDS A STRAIGHT HORIZONTAL LINE
230      C=XO/CW(I,IS)
	 RES(I)=C*(AA*C/CW(I,IS)+SW(I,IS))
	 GO TO 280
C XO VERY LARGE
240      XA=XO/A(I,IS)
	 GO TO 260
C ILINE = 1
250      XA=XO*A(I,IS)
	 IF(DABS(XO).GT.1.D8*DABS(B(I,IS))*CW2) GO TO 260
C XO IS ALWAYS NONZERO, THEREFORE, B, XP2, AND A MUST BE NONZERO;
C RETURN TO NORMAL CASE
	 C=XO/B(I,IS)
	 AA=1./A(I,IS)
	 GO TO 210
C PARABOLA DEGENERATES TOWARDS A FOLDED VERTICAL LINE
260      ROOT=DSQRT(-XA/SW(I,IS))
	 C=XO*CW(I,IS)
	 RES(I)=(ROOT-C)/SW(I,IS)
	 ALT=(-ROOT-C)/SW(I,IS)
	 IF((Y1-ALT)*ALT.GT.(Y1-RES(I))*RES(I)) RES(I)=ALT
C
280      RES(I)=RES(I)*FY(I,IS)+Y(J0)
300   CONTINUE
C
C WEIGHT TWO PARABOLAS ACCORDING TO DISTANCE FROM (J-1) AND (J)
      DX=X(J)-X0
      DY=Y(J)-RES(2)
      WT1=DSQRT(DX*DX+DY*DY)
      DX=X0-X(J-1)
      DY=RES(1)-Y(J-1)
      WT2=DSQRT(DX*DX+DY*DY)
      Y0=(RES(1)*WT1+RES(2)*WT2)/(WT1+WT2)
      RETURN
C
C400   TYPE  *,' X0 NOT BRACKETED BY X(J-1) AND X(J)'
      RETURN
      END
C$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
      FUNCTION QR(X)
      IMPLICIT REAL*8(A-H,O-Z)
      IF(X.EQ.0.) THEN 
         QR = 0.0D0
      ELSE
         QR = DSIGN(DEXP(DLOG(DABS(X))/3.D0),X)
      ENDIF
      RETURN
      END
